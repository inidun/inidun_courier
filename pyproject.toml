[tool.poetry]
name = "unesco-data-collection"
version = "0.2.0"
description = "Curation of UNESCO documents for the INIDUN project."
authors = ["aibakeneko <aibakeneko at gmail.com>"]
readme = "README.md"
packages = [{include = "unesco_data_collection"}]

[tool.poetry.dependencies]
python = "^3.8"
argh = "^0.26.2"
bs4 = "^0.0.1"
ftfy = "^6.0.3"
fuzzysearch = "^0.7.3"
fuzzywuzzy = {extras = ["speedup"], version = "^0.18.0"}
Jinja2 = "^3.0.1"
JPype1 = "^1.3.0"
loguru = "^0.5.3"
more-itertools = "^8.8.0"
nltk = "^3.6.2"
pandas = "^1.2.5"
pdf2image = "^1.16.0"
pdfplumber = "^0.5.28"
pytesseract = "^0.3.8"
python-pdfbox = "^0.1.8"
requests = "^2.25.1"
tqdm = "^4.61.1"
untangle = "^1.1.1"

[tool.poetry.dev-dependencies]
black = "^21.6b0"
flake8 = "^3.9.2"
flake8-black = "^0.2.1"
flake8-pytest-style = "^1.4.2"
flake8-quotes = "^3.2.0"
httpretty = "^1.1.3"
ipykernel = "^6.0.1"
isort = "^5.9.1"
mypy = "^0.910"
pyinstrument = "^4.0.2"
pylint = "^2.9.3"
pytest = "^6.2.4"
pytest-cov = "^2.12.1"
rope = "^0.19.0"
types-requests = "^2.25.0"
types-setuptools = "^57.0.0"
types-toml = "^0.1.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py38"]
exclude = '''
(
  \.git
  | \.pypy_cache
  | \.pytest_cache
  | \.mypy_cache
  | deprecated
)
'''

[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "setuppy", path = "setup.py"}

[tool.isort]
profile = "black"
line_length = 120
py_version = "auto"
float_to_top = true
src_paths = [ "courier", "legal_instruments", "tests", "tmp" ]

[tool.pytest.ini_options]
log_cli = "False"
testpaths = [
    "tests",
]
python_files = "*_test.py"
python_functions = "test_*"
markers = [
    "java: marks tests as java dependent (deselect with '-m \"not java\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serial",
]


[tool.coverage.run]
branch = true
omit = [
    "**/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
show_missing = true
sort = "Name"
